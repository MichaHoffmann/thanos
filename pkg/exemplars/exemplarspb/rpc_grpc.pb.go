// Copyright (c) The Thanos Authors.
// Licensed under the Apache License 2.0.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: exemplars/exemplarspb/rpc.proto

package exemplarspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Exemplars_Exemplars_FullMethodName = "/thanos.Exemplars/Exemplars"
)

// ExemplarsClient is the client API for Exemplars service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExemplarsClient interface {
	// / Exemplars has info for all exemplars.
	// / Returned exemplars are expected to include external labels.
	Exemplars(ctx context.Context, in *ExemplarsRequest, opts ...grpc.CallOption) (Exemplars_ExemplarsClient, error)
}

type exemplarsClient struct {
	cc grpc.ClientConnInterface
}

func NewExemplarsClient(cc grpc.ClientConnInterface) ExemplarsClient {
	return &exemplarsClient{cc}
}

func (c *exemplarsClient) Exemplars(ctx context.Context, in *ExemplarsRequest, opts ...grpc.CallOption) (Exemplars_ExemplarsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Exemplars_ServiceDesc.Streams[0], Exemplars_Exemplars_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &exemplarsExemplarsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Exemplars_ExemplarsClient interface {
	Recv() (*ExemplarsResponse, error)
	grpc.ClientStream
}

type exemplarsExemplarsClient struct {
	grpc.ClientStream
}

func (x *exemplarsExemplarsClient) Recv() (*ExemplarsResponse, error) {
	m := new(ExemplarsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExemplarsServer is the server API for Exemplars service.
// All implementations must embed UnimplementedExemplarsServer
// for forward compatibility
type ExemplarsServer interface {
	// / Exemplars has info for all exemplars.
	// / Returned exemplars are expected to include external labels.
	Exemplars(*ExemplarsRequest, Exemplars_ExemplarsServer) error
	mustEmbedUnimplementedExemplarsServer()
}

// UnimplementedExemplarsServer must be embedded to have forward compatible implementations.
type UnimplementedExemplarsServer struct {
}

func (UnimplementedExemplarsServer) Exemplars(*ExemplarsRequest, Exemplars_ExemplarsServer) error {
	return status.Errorf(codes.Unimplemented, "method Exemplars not implemented")
}
func (UnimplementedExemplarsServer) mustEmbedUnimplementedExemplarsServer() {}

// UnsafeExemplarsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExemplarsServer will
// result in compilation errors.
type UnsafeExemplarsServer interface {
	mustEmbedUnimplementedExemplarsServer()
}

func RegisterExemplarsServer(s grpc.ServiceRegistrar, srv ExemplarsServer) {
	s.RegisterService(&Exemplars_ServiceDesc, srv)
}

func _Exemplars_Exemplars_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExemplarsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExemplarsServer).Exemplars(m, &exemplarsExemplarsServer{stream})
}

type Exemplars_ExemplarsServer interface {
	Send(*ExemplarsResponse) error
	grpc.ServerStream
}

type exemplarsExemplarsServer struct {
	grpc.ServerStream
}

func (x *exemplarsExemplarsServer) Send(m *ExemplarsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Exemplars_ServiceDesc is the grpc.ServiceDesc for Exemplars service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Exemplars_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thanos.Exemplars",
	HandlerType: (*ExemplarsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Exemplars",
			Handler:       _Exemplars_Exemplars_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "exemplars/exemplarspb/rpc.proto",
}
