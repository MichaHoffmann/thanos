// Copyright (c) The Thanos Authors.
// Licensed under the Apache License 2.0.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.1
// source: targets/targetspb/rpc.proto

package targetspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Targets_Targets_FullMethodName = "/thanos.Targets/Targets"
)

// TargetsClient is the client API for Targets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TargetsClient interface {
	// / Targets has info for all targets.
	// / Returned targets are expected to include external labels.
	Targets(ctx context.Context, in *TargetsRequest, opts ...grpc.CallOption) (Targets_TargetsClient, error)
}

type targetsClient struct {
	cc grpc.ClientConnInterface
}

func NewTargetsClient(cc grpc.ClientConnInterface) TargetsClient {
	return &targetsClient{cc}
}

func (c *targetsClient) Targets(ctx context.Context, in *TargetsRequest, opts ...grpc.CallOption) (Targets_TargetsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Targets_ServiceDesc.Streams[0], Targets_Targets_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &targetsTargetsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Targets_TargetsClient interface {
	Recv() (*TargetsResponse, error)
	grpc.ClientStream
}

type targetsTargetsClient struct {
	grpc.ClientStream
}

func (x *targetsTargetsClient) Recv() (*TargetsResponse, error) {
	m := new(TargetsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TargetsServer is the server API for Targets service.
// All implementations must embed UnimplementedTargetsServer
// for forward compatibility
type TargetsServer interface {
	// / Targets has info for all targets.
	// / Returned targets are expected to include external labels.
	Targets(*TargetsRequest, Targets_TargetsServer) error
	mustEmbedUnimplementedTargetsServer()
}

// UnimplementedTargetsServer must be embedded to have forward compatible implementations.
type UnimplementedTargetsServer struct {
}

func (UnimplementedTargetsServer) Targets(*TargetsRequest, Targets_TargetsServer) error {
	return status.Errorf(codes.Unimplemented, "method Targets not implemented")
}
func (UnimplementedTargetsServer) mustEmbedUnimplementedTargetsServer() {}

// UnsafeTargetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TargetsServer will
// result in compilation errors.
type UnsafeTargetsServer interface {
	mustEmbedUnimplementedTargetsServer()
}

func RegisterTargetsServer(s grpc.ServiceRegistrar, srv TargetsServer) {
	s.RegisterService(&Targets_ServiceDesc, srv)
}

func _Targets_Targets_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TargetsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TargetsServer).Targets(m, &targetsTargetsServer{stream})
}

type Targets_TargetsServer interface {
	Send(*TargetsResponse) error
	grpc.ServerStream
}

type targetsTargetsServer struct {
	grpc.ServerStream
}

func (x *targetsTargetsServer) Send(m *TargetsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Targets_ServiceDesc is the grpc.ServiceDesc for Targets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Targets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thanos.Targets",
	HandlerType: (*TargetsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Targets",
			Handler:       _Targets_Targets_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "targets/targetspb/rpc.proto",
}
